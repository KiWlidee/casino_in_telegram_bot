import os

from time import sleep

from random import choice, randint

import keyboards as kb

import user

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


router = Router()

casino_slots = ["üçí", "üçí", "üçí", "üçè", "üçè", "üçá", "üçì", "üçë", "üí©"]

#  blackjack = [2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 
# 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10]

class Admin_enter_to_panel(StatesGroup):
    waiting_number = State()

class Admin_change_money(StatesGroup):
    waiting_number = State()

class Admin_finder_people(StatesGroup):
    waiting_number = State()

class RouletteStates_one(StatesGroup):
    waiting_number = State()

class RouletteStates_two_color(StatesGroup):
    waiting_number = State()

class DiceStates_one(StatesGroup):
    waiting_number = State()

class DiceStates_many(StatesGroup):
    waiting_number = State()

YOUR_USER_ID = 1414872963

@router.message(Command("start"))
async def start(message: Message):
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}! –≠—Ç–æ –∫–∞–∑–∏–Ω—ã—á —Å–æ —Å–ª–æ—Ç–∞–º–∏.
–í–∞–ª—é—Ç–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–∞—è, —Ç–∞–∫ —á—Ç–æ –Ω–µ –æ—á–∫—É–π.
–ù–æ –µ—Å—Ç—å –±–∞–±–∫–∏ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è, —Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∂–µ—Å—Ç–∫–æ –¥–µ–ø–∞—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å–∏—Ç—å –¥–µ–Ω—é–∂–∫–∏ —É –ê–¥–º–∏–Ω–∞.""", reply_markup=kb.register)
    
    
@router.message(F.text == "‚úç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è / üîë –í–æ–π—Ç–∏")
async def register(message: Message):
    await message.answer("–ò—â—É –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...", reply_markup=ReplyKeyboardRemove())
    sleep(0.5)
    if user.user_find(message.from_user.id):
        user.add_znach_table()
        user.start_username_add(message.from_user.id)
        user.start_profile_stats(message.from_user.id)
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=kb.main_menu)
    else:
        await message.answer("üîë –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!", reply_markup=kb.main_menu)

@router.message(F.text == "üõ†Ô∏è")
async def admin_panel(message: Message, state: FSMContext):
    await message.answer("–≠—Ç–æ - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, —Å—é–¥–∞ –Ω–µ —Å—É–π—Å—è.")
    await state.set_state(Admin_enter_to_panel.waiting_number)

@router.message(Admin_enter_to_panel.waiting_number)
async def process_admin_password(message: Message, state: FSMContext):
    if message.text == "14881777":
        if user.user_check(message.from_user.id):
            random_money = randint(40000, 75000)
            user.money_winner(message.from_user.id, random_money)
            await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω! –ù–∞ –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {random_money}. \
                                –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", 
                                reply_markup=kb.ADMIN_panel)
            await state.clear()
        else:
            user.money_winner(message.from_user.id, -10000)
            await state.clear()
            await message.answer("–ó–∞ —Ç–∞–∫–∏–µ —Ñ–æ–∫—É—Å—ã, —è –∑–∞–±–∏—Ä–∞—é —É —Ç–µ–±—è 10000")
            await start(message)
    elif message.text == "8038":
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!", reply_markup=kb.ADMIN_panel)
        await state.clear()
    else:
        await state.clear()
        await start(message) 

@router.message(Admin_enter_to_panel.waiting_number)
async def process_admin_password(message: Message, state: FSMContext):
    if message.text == "8038":
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!", reply_markup=kb.ADMIN_panel)
        await state.clear()
    else:
        await state.clear()
        await start(message)    

@router.message(F.text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å(—É–º–µ–Ω—å—à–∏—Ç—å —á–µ—Ä–µ–∑ (-)) –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def admin_change_money(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    await state.set_state(Admin_change_money.waiting_number)

@router.message(Admin_change_money.waiting_number)
async def process_admin_change_money(message: Message, state: FSMContext):
    id, money = message.text.split()
    user.money_winner(id, money)
    await message.answer("–í—Å–µ –≥–æ—Ç–æ–≤–æ!", reply_markup=kb.ADMIN_panel)
    await state.clear()

@router.message(F.text == "üë• –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id")
async def admin_finder_people(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await state.set_state(Admin_finder_people.waiting_number)

@router.message(Admin_finder_people.waiting_number)
async def process_admin_finder_people(message: Message, state: FSMContext):
    stats = user.profile_stats(int(message.text))
    for i in stats:
        await message.answer(i, reply_markup=kb.ADMIN_panel)
    await state.clear()

@router.message(F.text == "üíæ –°–¥–µ–ª–∞—Ç—å backup")
async def backup_database(message: Message):
    if message.from_user.id != YOUR_USER_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        if not os.path.exists("infouser.db"):
            await message.answer("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open("infouser.db", "rb") as f:
            db_data = f.read()
        
        await message.answer_document(
            BufferedInputFile(db_data, filename="infouser_backup.db"),
            caption="üì¶ Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")

@router.message(F.text == "‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def casino_menu(message: Message):
    await message.answer("–ü–æ–¥–Ω—è–ª –±–∞–±–ª–∞, —Å—Ç–∞–ª–∏ –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞.", reply_markup=kb.main_menu)

@router.message(F.text == "üîö –í—ã–π—Ç–∏")
async def stop(message: Message):
    await start(message)

@router.message(F.text == "ü™™ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    pass
    """–í—ã–≤–µ—Å—Ç–∏: –ë–∞–ª–∞–Ω—Å, –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫ –≤ —Å–ª–æ—Ç–∞—Ö, 
       –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä –≤ dice, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø—Ä–æ–∏–≥—Ä–∞–ª/–≤—ã–∏–≥—Ä–∞–ª"""
    stats = user.profile_stats(message.from_user.id)
    await message.answer(f"üÜî –í–∞—à id - {message.from_user.id}")
    for i in stats:
        await message.answer(i, reply_markup=kb.main_menu)

@router.message(F.text == "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã")
async def spin_slots(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ—Ç—ã! –ö–∞–∂–¥–∞—è –∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 50 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö."
                         , reply_markup=kb.slots)

@router.message(F.text == "‚¨ÜÔ∏è –ö—Ä—É—Ç–∏–º")
async def spin_slots(message: Message):
    if user.minus_money(message.from_user.id) == "–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã.":
        user.how_much_u_lose(message.from_user.id, 50)
        user.slots_spin_add(message.from_user.id)
        result = ""
        for _ in range(3):
            result += choice(casino_slots)
        await message.answer(result, reply_markup=kb.slots)
        if result == casino_slots[0] * 3:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —á–µ—Ä–µ—à–Ω—é –∏ 400 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö")
            user.how_much_u_won(message.from_user.id, 400)
            user.money_winner(message.from_user.id, 400)
        elif result == casino_slots[3] * 3:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —è–±–ª–æ–∫–∏ –∑–µ–ª–µ–Ω—ã–µ –∏ 750 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö... —è–±–ª–æ–∫ –≥—Ä–µ–Ω–Ω–∏ —Å–º–∏—Ç")
            user.how_much_u_won(message.from_user.id, 750)
            user.money_winner(message.from_user.id, 750)
        elif result == casino_slots[-4] * 3:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∫–∏—à–º–∏—à –∏ 1000 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö")
            user.how_much_u_won(message.from_user.id, 1000)
            user.money_winner(message.from_user.id, 1000)
        elif result == casino_slots[-3] * 3:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ø–∏—Ä–æ–≥ –∏ 1500 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö")
            user.how_much_u_won(message.from_user.id, 1500)
            user.money_winner(message.from_user.id, 1500)
        elif result == casino_slots[-2] * 3:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—ç—Ä—Å–∏–∫ –∏ 2000 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö")
            user.how_much_u_won(message.from_user.id, 2000)
            user.money_winner(message.from_user.id, 2000)
        elif result == casino_slots[-1] * 3:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ–µ–±–∞–ª–∏ 1000 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö!")
            user.how_much_u_lose(message.from_user.id, 1000)
            user.money_winner(message.from_user.id, -1000)
    else:
        await message.answer("–ë—ç–π–±–∏ –Ω–æ—É –º–∞–Ω–∏", reply_markup=kb.casino_menu)

@router.message(F.text == "üõû –†—É–ª–µ—Ç–∫–∞")
async def roulette(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ï–≤—Ä–æ–ø–µ–π—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É! –ö–∞–∂–¥–∞—è –∫—Ä—É—Ç–∫–∞ –æ–±–æ–π–¥–µ—Ç—Å—è –≤ 50 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö."
                         , reply_markup=kb.roulette)
    
@router.message(F.text == "üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ–¥–Ω–æ —á–∏—Å–ª–æ")
async def roulette_one_num(message: Message, state: FSMContext):
    if user.minus_money(message.from_user.id) == "–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã.":
        user.how_much_u_lose(message.from_user.id, 50)
        user.roulette_spin_add(message.from_user.id)
        await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ",
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(RouletteStates_one.waiting_number)
    else:
        await message.answer("–ë—ç–π–±–∏ –Ω–æ—É –º–∞–Ω–∏", reply_markup=kb.casino_menu)

@router.message(RouletteStates_one.waiting_number)
async def process_roulette_number(message: Message, state: FSMContext):
    user_number = message.text
    try:
        user_number = int(user_number)
        if 0 <= user_number <= 36:
            roulette_random_num = randint(0, 36)
            if user_number == roulette_random_num:
                user.how_much_u_won(message.from_user.id, 1750)
                user.money_winner(message.from_user.id, 1750)
                await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1750 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω–µ–Ω—å–∫–∏—Ö!", reply_markup=kb.roulette)
                await state.clear()
            else:
                await message.answer(f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {roulette_random_num}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", reply_markup=kb.roulette)
            await state.clear()
        else:
            await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 36 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ", reply_markup=kb.roulette)
            await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ", reply_markup=kb.roulette)
        await state.clear()

@router.message(F.text == "üî¥‚ö´üü¢ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ü–≤–µ—Ç")
async def roulette_one_num(message: Message, state: FSMContext):
    if user.minus_money(message.from_user.id) == "–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã.":
        user.how_much_u_lose(message.from_user.id, 50)
        user.roulette_spin_add(message.from_user.id)
        await message.answer("–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç.", reply_markup=kb.roulette_color)
        await state.set_state(RouletteStates_two_color.waiting_number)
    else:
        await message.answer("–ë—ç–π–±–∏ –Ω–æ—É –º–∞–Ω–∏", reply_markup=kb.casino_menu)

@router.message(RouletteStates_two_color.waiting_number)
async def process_roulette_color(message: Message, state: FSMContext):
    if message.text == "üî¥":
        perc_color = 1
    elif message.text == "‚ö´":
        perc_color = 2
    elif message.text == "üü¢":
        perc_color = 0
    else:
        await message.answer("–ù—É —Ç—ã –¥—É—Ä–µ–Ω—å –∫–æ–Ω–µ—á–Ω–æ. –ò–∑ –¥–≤—É—Ö —Ç—ã –≤—ã–±—Ä–∞–ª —Ö—É–π –ø–æ–π–º–∏ —á—Ç–æ", reply_markup=kb.roulette)
        await state.clear()
        return
    dice_number = randint(0, 36)
    if dice_number == 0 and perc_color == 0:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1750 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö", reply_markup=kb.roulette)
        await state.clear()
    elif dice_number % 2 == 0 and perc_color == 2:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 80 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö", reply_markup=kb.roulette)
        await state.clear()
    elif dice_number % 2 != 0 and perc_color == 1:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 80 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö", reply_markup=kb.roulette)
        await state.clear()
    else:
        if dice_number == 0:
            await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –¶–≤–µ—Ç –±—ã–ª: üü¢", reply_markup=kb.roulette)
            await state.clear()
        elif dice_number % 2 == 0:
            await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –¶–≤–µ—Ç –±—ã–ª: ‚ö´", reply_markup=kb.roulette)
            await state.clear()
        elif dice_number % 2 != 0:
            await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –¶–≤–µ—Ç –±—ã–ª: üî¥", reply_markup=kb.roulette)
            await state.clear()

@router.message(F.text == "üé≤ –ö–æ—Å—Ç–∏")
async def dice(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ dice! –ö–∞–∂–¥—ã–π –±—Ä–æ—Å–æ–∫ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 50 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö."
                         , reply_markup=kb.dice)

@router.message(F.text == "üì¶ –ë—Ä–æ—Å–∞–µ–º")
async def drop_dice(message: Message):
    if user.minus_money(message.from_user.id) == "–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã.":
        user.how_much_u_lose(message.from_user.id, 50)
        user.dice_drop_add(message.from_user.id)
        await message.answer("–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã!", reply_markup=kb.dice_game)
    else:
        await message.answer("–ë—ç–π–±–∏ –Ω–æ—É –º–∞–Ω–∏", reply_markup=kb.casino_menu) 

@router.message(F.text == "ü§î –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞")
async def dice_choose_one(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ", reply_markup=kb.dice_number_choose)
    await state.set_state(DiceStates_one.waiting_number)

@router.message(DiceStates_one.waiting_number)
async def choose_number(message: Message, state: FSMContext):
    if message.text == "1Ô∏è‚É£":
        perc_num = "1"
    elif message.text == "2Ô∏è‚É£":
        perc_num = "2"
    elif message.text == "3Ô∏è‚É£":
        perc_num = "3"
    elif message.text == "4Ô∏è‚É£":
        perc_num = "4"
    elif message.text == "5Ô∏è‚É£":
        perc_num = "5"
    elif message.text == "6Ô∏è‚É£":
        perc_num = "6"
    else:
        await message.answer("–ù—É —Ç—ã —Ç—É–ø–µ–Ω—å. –í—ã–±–∏—Ä–∞–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.", reply_markup=kb.dice)
        await state.clear()
    dice_number = str(randint(1, 6))
    if perc_num == dice_number:
        user.how_much_u_won(message.from_user.id, 150)
        user.money_winner(message.from_user.id, 150)
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 150 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö", reply_markup=kb.dice)
        await state.clear()
    else:
        await message.answer(f"–†–∞–Ω–¥–æ–º–Ω—ã–º —á–∏—Å–ª–æ–º –±—ã–ª–æ - {dice_number}. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª", reply_markup=kb.dice)
        await state.clear()

@router.message(F.text == "ü§î –í—ã–±–æ—Ä –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞")
async def dice_choose_promezh(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —á–∏—Å–µ–ª", reply_markup=kb.dice_number_choose_promezh)
    await state.set_state(DiceStates_many.waiting_number)
@router.message(DiceStates_many.waiting_number)
async def dice_chooses_pr(message: Message, state: FSMContext):
    if message.text == "1Ô∏è‚É£2Ô∏è‚É£":
        user_promezh = "12"
    elif message.text == "3Ô∏è‚É£4Ô∏è‚É£":
        user_promezh = "34"
    elif message.text == "5Ô∏è‚É£6Ô∏è‚É£":
        user_promezh = "56"
    else:
        await message.answer("–ù—É —Ç—ã —Ç—É–ø–µ–Ω—å. –í—ã–±–∏—Ä–∞–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.", reply_markup=kb.dice)
        await state.clear()

    dice_number = str(randint(1, 6))
    if dice_number in user_promezh:
        user.how_much_u_won(message.from_user.id, 75)
        user.money_winner(message.from_user.id, 75)
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 75 –≤–µ—á–Ω–æ –∑–µ–ª–µ–Ω—ã—Ö", reply_markup=kb.dice)
        await state.clear()
    else:
        await message.answer(f"–†–∞–Ω–¥–æ–º–Ω—ã–º —á–∏—Å–ª–æ–º –±—ã–ª–æ - {dice_number}. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª", reply_markup=kb.dice)
        await state.clear()